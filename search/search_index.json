{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the newguy103-syncserver documentation","text":"<p>A simple file storage server with FastAPI, OAuth2, API keys and more. Made as a rewrite to the original flask version of this app, and to learn more about FastAPI and ORMs.</p> <p>Current latest version: 0.1.0</p>"},{"location":"#overview","title":"Overview","text":"<p>This project uses FastAPI, SQLModel, Valkey and more.</p> <p>It also uses modern Python types, but not strictly enforcing static type checking. It's simpler for me because I don't need to worry about mypy and others while still benefitting from IDE autocomplete.</p> <p>There are tests which you can read more about on the App Overview page below.</p>"},{"location":"#modules","title":"Modules","text":"<ul> <li>App Overview</li> <li>Database Component</li> </ul>"},{"location":"app-overview/","title":"Server App Overview","text":"<p>The <code>newguy103-syncserver</code> API docs are already generated by FastAPI's automatic API documentation, so this page will only define a general overview of the FastAPI app.</p> <p>You can find the generated docs under <code>/docs</code> (Comes from FastAPI).</p>"},{"location":"app-overview/#server-requirements","title":"Server requirements","text":"<p>The app requires these components to function:</p> <ul> <li>Python 3.12+ in a virtual environment with uv.</li> <li>A PostgreSQL instance.</li> <li>A Valkey instance.</li> </ul>"},{"location":"app-overview/#running-the-server","title":"Running the server","text":"<p>The server can be ran in two ways:</p> <ol> <li>Through the Docker images.</li> <li>Through cloning the repository locally.</li> </ol>"},{"location":"app-overview/#1-docker","title":"1. Docker","text":"<p>You can pull the image and run the Docker image:</p> <pre><code>docker pull ghcr.io/newguy103/syncserver:latest\ndocker run \\\n--volume ./syncserver_data:/app/syncserver \\\n--publish 8000:8000\nghcr.io/newguy103/syncserver:latest\n</code></pre> <p>There is a Docker Compose example in the docker directory of the repository if you prefer using compose.</p> <p>You can also use the edge tag for the images built per commit in the main branch.</p>"},{"location":"app-overview/#2-cloning-the-repository","title":"2. Cloning the repository","text":"<p>You can clone the repository and run it directly:</p> <pre><code>git clone https://github.com/newguy103/syncserver\ncd syncserver\nuv venv\nsource .venv/bin/activate\nuv sync\n</code></pre> <p>Running the server is simple:</p> <pre><code>fastapi run app/server/main.py\n</code></pre> <p>This will start the app and expose it under <code>http://0.0.0.0:8000</code></p>"},{"location":"app-overview/#environment-variables","title":"Environment variables","text":"<p><code>newguy103-syncserver</code> requires some environment variables to run properly. These use <code>pydantic-settings</code>, so putting an <code>.env</code> file in the current directory is supported.</p> <p>Required variables:</p> <ul> <li><code>POSTGRES_HOST</code>, <code>POSTGRES_PORT</code>, <code>POSTGRES_USER</code>, <code>POSTGRES_DB</code> and <code>POSTGRES_PASSWORD</code> for the database connection.</li> <li><code>VALKEY_URI</code> as the URI to the Valkey server.</li> </ul> <p><code>POSTGRES_PASSWORD</code> raises an error and prevents app startup if the value is still the default <code>helloworld</code>.</p> <p>Optional variables:</p> <ul> <li><code>ENVIRONMENT=[local | dev | prod]</code>: Sets the environment where the server runs in, defaults to <code>local</code>.</li> <li><code>USE_VALKEY_CACHE=true</code>: Sets a flag to tell the database to use the Valkey cache.   Required to be true if the environment is not local. Used by tests to disable Valkey.</li> <li><code>DATA_DIRECTORY=./syncserver</code>: The path to the data directory to store files and config.   The Docker image keeps this as <code>/app/syncserver</code>, so it's intended to be used when not using Docker.</li> <li><code>FIRST_USER_NAME=admin</code>: Sets the first user name which will be the superuser.</li> <li><code>FIRST_USER_PASSWORD=helloworld</code>: Sets the password of the superuser.   Raises an error and prevents app startup if the value is still the default in non-local environments.</li> </ul>"},{"location":"app-overview/#authentication","title":"Authentication","text":"<p>All API requests require authorization, and follows the OAuth2 specification. Tests</p> <p>There are tests available which are all integration tests for the database and the full route. These tests are in the tests directory.</p> <p>To run it, clone the repository and install dev dependencies:</p> <p>uv sync --dev ./scripts/tests.sh</p> <p>This will run the tests and have the directory and database set to a test directory and temporary sqlite3 database. Or an <code>X-Api-Key</code> header for API key authorization.</p>"},{"location":"app-overview/#tests","title":"Tests","text":"<p>There are tests available which are all integration tests for the database and the full route. These tests are in the tests directory.</p> <p>To run it, clone the repository and install dev dependencies:</p> <pre><code>uv sync --dev\n./scripts/tests.sh\n</code></pre> <p>This will run the tests and have the directory and database set to a test directory and temporary sqlite3 database.</p>"},{"location":"database-component/","title":"Database Component Information","text":"<p>This page will show the database component and how it works.</p>"},{"location":"database-component/#overview","title":"Overview","text":"<p>The <code>syncserver.server</code> database uses PostgreSQL and <code>asyncpg</code> as it's connector.</p> <p>The app uses SQLModel as the ORM, because it utilizes Pydantic and SQLAlchemy.</p>"},{"location":"database-component/#tables","title":"Tables","text":"<p>The models used to generate the database tables can be found in <code>app/models/dbtables.py</code>.</p>"},{"location":"database-component/#code-documentation","title":"Code documentation","text":"<p>The database code can be found under <code>app/internal/database.py</code>, and uses Python type hints.</p>"},{"location":"database-component/#migrations","title":"Migrations","text":"<p>The app uses alembic to handle both setting up the schema and database migrations. The script <code>migrations.sh</code> runs all required commands.</p>"}]}